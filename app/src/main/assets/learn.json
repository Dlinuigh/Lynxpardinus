[
    
    {
        "title": "第1章：变量和简单数据类型",
        "content": "    在本章中，你将学习可在Python程序中使用的各种数据，还将学习如何将数据存储到变量中，以及如何在程序中使用这些变量"
    },
    {
        "title": "1.1 运行hello_world.py时发生的情况",
        "content": "hello_world.py:\nprint(\"hello world!\")\n输出：\nhello world\n    运行文件hello_world.py时，末尾的.py指出这是一个Python程序，因此编辑器将使用Python解释器来运行它。Python解释器读取整个程序，确定其中每个单词的含义\n    编写程序时，编辑器会以各种方式突出程序的不同部分"
    },
    {
        "title": "1.2 变量",
        "content": "    下面尝试在hello_world.py中使用一个变量。\nmessage = \"hello world!\"\nprint(message)\n输出：\nhello world\n    下面尝试在hello_world.py中使用一个变量。在这个文件开头添加一行代码，并对第2行代码进行修改，如下所示：\nmessage = \"hello world!\"\nprint(message)\n输出：\nhello world\n    我们添加了一个名为message的变量。每个变量都储存了一个值——与变量相关联的信息。在这里，储存的之为文本“hello world”。\n    添加变量导致Python解释器需要做更多工作。处理第1行代码时，它将文本“hello world”与变量Python关联起来；而处理第2行代码时，它将与变量message关联的值打印到屏幕。\n    下面来进一步扩展这个程序：修改hello_world.py，使其再打印一条消息。为此，在hello_world.py中添加一个空行再添加下面两行代码：\nmessage = \"hello world!\"\nprint(message)\n\nmessage = \"hello python crash course world!\"\n输出：\nhello world!\nhello python crash course world!\n    在程序中可随时修改变量的值，而Python将始终记录变量的最新值。"
    },
    {
        "title": "1.2.1 变量的命名和使用",
        "content": "    在Python中使用变量时，需要遵守一些规则和指南。违反这些规则将引发错误，而指南旨在让你编写的代码更容易阅读和理解。请务必牢记下述有关变量的规则。\n    变量名只能包括字母、数字和下划线。变量名可以字母或下划线开头，但不能以数字开头，例如，可将变量命名为message_1，但不能将其命名为1_message。\n    变量名不能包含空格，但可以使用下划线来分隔其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误。\n    不要将Python关键字和函数名用作变量名，即不要使用Python把漂流用于特殊用途的单词，如print\n    变量名应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好。\n    慎用小写字母l和大写字母O，因为他们可能被人看成数组1和0。\n"
    },
    {
        "title": "1.2.2 使用变量时避免命名错误",
        "content": "    我们将有意地编写一些引发错误的代码。\nmessage = \"hello world!\"\nprint(mesage)\n程序存在错误时，Python解释器将竭尽所能地帮助你找出问题所在。程序无法成功地运行时，解释器会提供一个traceback。traceback是一条记录，指出了解释器尝试运行代码时，在什么地方陷入了困境。下面是你不小心错误地拼写了变量名时，Python解释器提供的traceback：\nTraceback (most recent call last):\n File \"hello_world.py\", line 2, in <module>\n     print(mesage)\nNameError: name 'mesage' is not defined\n    解释器指出，文件hello_world.py的第2行存在错误；它列出了这行代码，旨在帮助你快速找出错误；它还指出了它发现的是什么样的凑五。在这里，解释器发现了一个名称错误，并指出打印的变量mesage未定义：Python无法识别你提供的变量名。名称错误通常意味着两种情况：要么是使用变量前忘记了给它赋值，要么是输入变量名时拼写不正确。\n    在这个实例中，第2行的变量名message中遗漏了字母s。Python解释器不会对代码做拼写检查，但要求变量名的拼写一致。如果将代码中message改为mesage，代码将成功运行。"
    },
    {
        "title": "1.3 字符串",
        "content": "    字符串就是一系列字符。在Python中，用引号括起的都是字符串，其中的引号可以是单引号也可以是双引号\n    下面来看一些使用字符串的方式。"
    },
    {
        "title": "1.3.1 使用方法修改字符串的大小写",
        "content": "    对于字符串，可执行的最简单的操作之一是修改其中的单词的大小写。请看下面的代码：\nname = \"ada lovelace\"\nprint(name.title())\n    将这个文件保存为name.py，再运行它。你将看到如下输出：\nAda Lovelace\n    在这个示例中，小写的字符串\"ada lovelace\"存储到了变量name中。在print()语句中，方法title()出现在这个变量的后面。方法是Python可对数据执行的操作。在name.title()中，name后面的句点(.)让Python对变量name执行方法title()指定的操作。每个方法后面都跟着一对括号，这是因为方法通常需要额外的信息来完成其工作。这种信息是在括号内提供的。函数title()不需要额外的信息，因此它后面的括号是空的。\n    title()以首字母大写的方式显示每个单词，即将每个单词的首字母都改为大写。\n    还有其他几个很有用的大小写处理方法。如使用upper()将字母改为全大写，lower将字母改为全小写。"
    },
    {
        "title": "1.3.2 合并（拼接）字符串",
        "content": "    在很多情况下，都需要合并字符串。\nfirst_name = \"ada\"\nlast_name = \"lovelace\"\nfull_name = first_name + \" \" + last_name\n\nprint(full_name)\n    Python使用加号（+）来合并字符串。在这个示例中，我们使用+来合并first_name、空格和last_name,以得到完整的姓名，其结果如下：\nada lovelace\n    这种合并字符串的方式称为拼接，可使用存储在变量中的信息来创建完整的信息。"
    },
    {
        "title": "1.3.3 使用制表符或换行符来添加空白",
        "content": "    在编程中，空白泛指任何非打印文字，你可使用空白来组织输出使其更易读。\n    要在字符串中添加制表符，可使用字符组合\\t，要在字符串中添加换行符，可使用字符组合\n"
    },
    {
        "title": "1.3.4 删除空白",
        "content": "    Python能够找出字符串开头和末尾多余的空白。要确保字符串末尾没有空白，可使用方法rstrip()。\n>>>favorite_language = 'python  '\n>>>favorite_language\n'python '\nfavorite_language.rstrip()\n'python'\n    存储在变量favorite_language中的字符串末尾包含多余的空白。你在终端会话中向Python询问这个变量的值时，可看到末尾的空格。对变量调用方法rstrip()后，这个空格被删除了。但这种删除是暂时的。\n    要永久删除这个字符串中的空白，必须将删除操作的结果存回到变量中；\n    即favorite_language = favorite_language.rstrip()。\n    你还可以剔除字符串开头的空白，或同事剔除字符串两端的空白。为此，可分别使用方法lstrip()和strip()。"
    },
    {
        "title": "1.4 数字",
        "content": "    在编程中，经常使用数字来记录游戏得分、表示可视化数据、存储Web应用信息等。Python根据数字的用法以不同的方式处理它们。"
    },
    {
        "title": "1.4.1 整数",
        "content": "    在Python中，可对整数执行加（+）减（-）乘（*）除（/）运算。\n>>>2+3\n5\n>>>3-2\n1\n>>>2*3\n6\n>>>3/2\n1.5\n    在终端会话中，Python直接返回运算结果。Python使用两个乘号表示乘方运算:\n>>>3 ** 3\n9\n    Python还支持运算优先级，因此你可在同一个表达式中使用多种运算。你还可以使用括号来修改运算优先级，让Python按你指定的次序执行运算。在运算中，空格不影响Python计算表达式的方式，它们的存在旨在让你阅读代码时更加轻松。"
    },
    {
        "title": "1.4.2 浮点数",
        "content": "    Python将带小数点的数字都成为浮点数。大多数编程语言都使用这个术语，它指出了小数点可出现在数字的任何位置的事实。\n    从很大程度上说。使用浮点数时都无需下考虑其行为。你只需输入要使用的数字，Python通常都会按你期望的方式处理它们：\n>>>0.1 + 0.1\n0.2\n>>>2 * 0.2\n0.4\n    但要注意的是，结果包含的小数位数可能是不确定的：\n>>>0.1+0.2\n0.30000000000000004\n    所有语言都存在这种问题，没有什么可担心的。Python会尽力找到一种方式，以尽可能精确地表示结果。"
    },
    {
        "title": "1.4.3 使用函数str()避免类型错误",
        "content": "    你经常需要在消息中使用变量的值。例如，假设你要祝某人生日快乐，可能会编写类似于下面的代码：\nbirthday.py\n\nage = 23\nmessage = \"Happy\" + age + \"rd Birthday!\"\nprint(message)\n    你可能认为，上述代码会打印一条简单的生日祝福：Happy 23rd Birthday！。但如果你运行这些代码，将发现它们会引发错误：\nTraceback(most recent call last):\n  File \"birthday.py\", line 2, in <module>\\n    message = \"Happy\" + age + \"rd Birthday!\"\nTypeError: Can't convert 'int' object to str implicitly\n    这是一个类型错误，意味着Python无法识别你使用的信息。在这个示例中，Python发现你使用了一个值为整数（int）的变量，但它不知道该如何解读这个值。像上面这样在字符串中使用整数时，需要显式地指出你希望Python将这个整数用作字符串。为此，可调用函数str()，它让Python将非字符值表示为字符串：\nage = 23\nmessage = \"Happy \" + str(age) + \"rd Birthday!\"\nprint(message)\n    这样Python就知道你要将数值23转换为字符串，进而显示正确的结果。"
    },
    {
        "title": "1.5 注释",
        "content": "    在Python中，注释用井号（#）标识。井号后面的内容都会被Python解释器忽略，如下所示：\n#向大家问好\nprint(\"Hello\")Python解释器将忽略第一行，直接执行第二行。"
    },
    {
        "title": "1.6 小结",
        "content": "    在本章中，你学习了：如何使用变量；如何创建描述性变量名以及如何消除名称错误和语法错误；字符串是什么，以及如何使用小写、大写和首字母大写方式显示字符串；使用空白来显示整洁的输出，以及如何剔除字符串中多余的空白；如何使用整数和浮点数；使用数值数据时需要注意的意外行为。你还学习了如何编写说明注释，让代码更容易理解。"
    },
    {
        "title": "第2章 列表简介",
        "content": "    在本章和下一章中，你将学习列表是什么以及如何使用列表元素。列表让你能够在一个地方存储成组地信息，其中可以只包含几个元素，也可以包含数百万哥元素。列表是新手可直接使用的最强大的Python功能之一，它融合了众多重要的编程概念。"
    },
    {
        "title": "2.1 列表是什么",
        "content": "    列表是由一系列按特定顺序排列的元素组成。你可以创建任何列表，其中的元素之间甚至可以没有任何关系。鉴于列表通常包含多个元素，给列表指定一个表示复数地名称是个不错的主意。\n    在Python中，用方括号（[]）来表示列表，并用逗号来分隔其中的元素。下面是一个简单的列表示意，这个列表中包含几种自行车：\nbicycles.py\n\nbicycles = ['trek','cannondale','redline','specialized']\nprint(bicycles)\n    如果你让Python将列表打印出来，Python将打印列表的内部表示，包括方括号：\n['trek','cannondale','redline','specialized']"
    },
    {
        "title": "2.1.1 访问列表元素",
        "content": "    列表是有序集合，因此要访问列表的任何元素，只需将该元素或索引告诉Python即可。要访问列表元素，可指出列表的名称，在指出元素的索引，并将其放在方括号内。如print(bicycles[0])可以访问列表的第一个元素trek。\n你还可以对任何列表元素调用第2章介绍的字符串的方法。例如，使用title()将元素'trek'首字母变为大写"
    },
    {
        "title": "2.1.2 索引从0而不是1开始",
        "content": "    在Python中，第一个列表元素的索引为0，而不是1。第二个列表元素的索引为1，根据这种简单的计数方式，可以将元素位置减1来访问任意元素。\n    同时Python为访问最后一个列表元素提供了一种特殊语法。通过将索引定位-1，可以让Python访问最后一个列表元素。这种语法很有用，因为你经常需要在不知道列表长度的情况下访问最后的元素。这种约定也适用于其他负数索引，例如，索引-2返回倒数第二个元素，索引-3返回倒数第三个列表元素，以此类推。"
    },
    {
        "title": "2.2 修改、添加和删除元素",
        "content": "    你创建的大多数列表都将是动态的，这意味着列表创建后，将随着程序的运行增删元素。"
    },
    {
        "title": "2.2.1 修改列表元素",
        "content": "    修改列表元素的语法与访问列表元素的语法类似。要修改列表元素，可指定列表名和要修改的元素的索引，再指定该元素的新值。例如：\nbicycles.py\n\nbicycles = ['trek','cannondale','redline','specialized']\nprint(bicycles)\nbicycles[0] = 'ducati'\nprint(bicycles)\n     我们先定义一个自行车列表，然后修改第一个元素的值，输出表明，第一个元素的值确实改变了。\n['trek','cannondale','redline','specialized']\n['ducati','cannondale','redline','specialized']\n    同样的，你可以修改列表中所有元素的值。"
    },
    {
        "title": "2.2.2 在列表中添加元素",
        "content": "    你可能出于众多原因要在列表中添加新元素。下面，我们展示添加元素的方法：\n    1.在列表末尾添加元素\n    在列表中添加新元素时，最简单的方式时将元素附加到列表末尾。给列表附加元素时，它将添加到列表末尾。我们可以使用方法append()。如bicycles.append('ducati')就可以将'ducati'添加到上述bicycles列表的末尾，而不会影响列表中的其他元素。\n    方法append()让动态地创建列表易如反掌，例如你可以先创建一个空链表bicycles = []，然后逐一添加元素。\n    2.在列表中插入元素\n    使用方法insert()可在列表的任何位置添加新元素。为此，你需要指定新元素的索引和值。\nbicycles = ['trek','cannondale','redline','specialized']\nbicycles.insert(0,ducati)\n    在示例中，值'ducati'被插入到了列表开头；方法insert()在索引0处添加空间，并将值'ducati'存储到这个地方。这种操作将列表中既有的每个元素都右移一个位置：\n['ducati','trek','cannondale','redline','specialized']"
    },
    {
        "title": "2.2.3 从列表中删除元素",
        "content": "    1.使用del语句删除元素\n    如果知道要删除的元素在列表中的位置，可使用del语句。\nbicycles = ['trek','cannondale','redline','specialized']\nprint(bicycles)\ndel bicycles[0]\nprint(bicycles)\n    输出结果：\n['trek','cannondale','redline','specialized']\n['cannondale','redline','specialized']\n    2.使用方法pop()删除元素\n    有时候，你要将元素从列表中删除，并接着使用它的值\n    方法pop()可删除列表末尾的元素，并让你能够接着使用它。术语弹出(pop)原子这样的类比：列表就像一个栈，而删除列表末尾的元素相当于弹出栈顶元素。\n    下面从列表motorcycles中弹出一款摩托车：\nmotorcycles = ['honda','yamaha','suzuki']\nprint(motorcycles)\npopped_motorcycle = motorcycles.pop()\nprint(motorcycles)\nprint(popped_motorcycles)\n    我们首先定义并打印了列表motorcycles。接下来，我们从列表中弹出一个值，并将其存储在变量中。然后我们打印这个列表，以合适从其中删除了一个值。最后，我们打印这个值，以证实我们还能访问这个值。\n['honda','yamaha','suzuki']\n['honda','yamaha']\nsuzuki\n    3.弹出列表中任意位置处的元素\n    实际上，你可以使用pop来删除列表中任意位置中的元素，只需在括号中指定要删除的元素的索引即可。例如：motorcyccles.pop(0)，就会删除列表中第一个元素。\n    4.根据值删除元素\n    我们可以用方法remove()来删除特定值的元素。假设，我们要删除'honda’元素。\nmotorcycles = ['honda','yamaha','suzuki']\nprint(motorcycles)\nmotorcycles.remove('ducati')\nprint(motorcycles)\n    输出结果：\n['honda','yamaha','suzuki']\n['yamaha','suzuki']"
    },
    {
        "title": "2.3 组织列表",
        "content": "在你创建的列表中，元素的排列顺序常常是无法预测的，因为你并非总能控制用户提供数据的顺序。这虽然在大多数情况下无可避免，但你经常需要以特定的顺序呈现信息。Python提供了很多组织列表的方式，可根据具体情况选用。"
    },
    {
        "title": "2.3.1 使用方法sort()对列表进行永久性排序",
        "content": "    Python方法sort()让你能够较为轻松地对列表进行排序。假设你有一个汽车列表，并要让其中的汽车按字母顺序排序。为简化这项任务，我们假设列表中所有的值都是小写的。\ncars.py\n\ncars = ['bmw','audi','toyota','subaru']\ncars.sort()\nprint(cars)\n    方法sort()永久性地修改了列表元素的排列顺序：\n['audi','bmw','subaru','toyota']\n    你还可以按与字母顺序想法的顺序排列列表元素，只需向sort()方法传递参数reverse = True。即cars.sort(reverse = True),这样就可以永久将列表按字母顺序相反排序。"
    },
    {
        "title": "2.3.2 使用函数sorted()对列表进行临时排序",
        "content": "    要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数sorted()。函数sorted()让你能够按特定顺序给显示列表元素，同时不影响它们在列表中的原始排列顺序。\n    下面尝试对汽车列表调用这个函数：\ncars = ['bmw','audi','toyota','subaru']\nprint(sorted(cars))\nprint(cars)\n    我们首先按顺序打印，再核实cars顺序是否改变：\n['audi','bmw','subaru','toyota']\n['bmw','audi','toyota','subaru']\n    注意，调用函数sorted()后，列表元素的排列顺序并没有改变。"
    },
    {
        "title": "2.3.3 倒着打印列表",
        "content": "    要反转列表元素的排列顺序，可使用方法reverse()。加黑色汽车列表是按购买时间排列的，可轻松地按照相反的顺序排列其中的汽车：\ncars = ['bmw','audi','toyota','subaru']\nprint(cars)\ncars.reverse()\nprint(cars)\n    注意reverse()不是指按与字母顺序想法的顺序排列列表元素，而只是反转列表元素的排列顺序：\n['bmw','audi','toyota','subaru']\n['subaru','toyota','audi','bmw']\n    方法reverse()永久性地修改列表元素的排列顺序，但可以再使用一次reverse()恢复到原来的顺序。"
    },
    {
        "title": "2.3.4 确定列表的长度",
        "content": "    使用函数len()可快速获悉列表的长度。例如：\n>>>cars = ['bmw','audi','toyota','subaru']\n>>>len(cars)\n4"
    },
    {
        "title": "2.5 小结",
        "content": "    在本章中，你学习了：列表是什么以及如何使用其中的元素；如何定义列表以及如何增删元素；如何对列表进行半永久性排序，以及如何为展示列表而进行临时排序；如何确定列表的长度。"
    },
    {
        "title": "第3章 操作列表",
        "content": "    在第3章，你学习了如何创建简单的列表，还学习了如何操作列表元素。在本章中，你将学习如何遍历整个列表，这只需要几行代码，无论列表有多长。"
    },
    {
        "title": "3.1 遍历整个列表",
        "content": "    你经常需要遍历列表的所有元素，对每个元素执行相同的操作。假设我们有一个魔术师名单，需要将其中每个魔术师的名字都打印出来。为此，我们可以通过使用for循环，让Python处理这些问题：\nmagicians.py\n\nmagicians = ['alice','david','carolina']\nfor magician in magicians:\n    print(magician)\n    首先，我们定义了一个列表。接下来，我们定义了一个for循环（注意for这一行最后需要添加一个冒号:），这行代码让Python从列表magicians中取出一个名字，并将其存储在变量magician中。最后，我们让Python打印前面存储到变量magician中的名字。这样Python将重复执行2、3行的代码。输出很简单：\nalice\ndavid\ncarolina\n"
    },
    {
        "title": "3.2 避免缩进错误",
        "content": "    Python根据缩进来判断代码行与前一个代码行的关系。在前面的示例中，向各位魔术师显示消息的代码行时for循环的一部分，因为它们锁进了。Python通过使用缩进让代码更易读；简单地说，它要求你使用缩进让代码整洁而结构清晰。在较长的Python程序中，你将看到缩进程序各不相同的代码块，这让你对程序的组织结构有大致的认识。\n当你开始编写必须正确缩进的代码时，需要注意一些常见的缩进错误。"
    },
    {
        "title": "3.3 创建数字列表",
        "content": "    需要存储一组数字的原因有很多，例如，在游戏中，需要跟踪每个角色的位置，还可能需要跟踪玩家的鸡哥最高得分。在数据可视化中，处理的几乎都是由数字组成的集合。\n    列表非常适合用于存储数字集合，而Python提供了很多工具，可帮助你高效地处理数字列表。"
    },
    {
        "title": "3.3.1 使用函数range()",
        "content": "    Python函数range()让你能够轻松地生成一系列数字。例如，可以像下面这样使用函数range()来打印一系列的数字：\nnumbers.py\n\nfor value in range(1,5):\n    print(value)\n    上述代码好像应该打印数字1~5，但实际上它不会打印数字5：\n1\n2\n3\n4\n    在这个示例中，range()只是打印数字1~4，这是你在编程语言中经常看到的差一行为的结果。函数range()让Python从你指定的第一个值开始数，并在到达你指定的第二个值后停止，因此输出不包含第二个值（这里为5）。\n    要打印数字1~5，需要使用range(1,6)。"
    },
    {
        "title": "3.3.2 使用range()创建数字列表",
        "content": "    要创建数字列表，可使用该函数list()将range()的结果直接转换为列表。如果将range()作为list的参数，输出将为一个数字列表。\n    在前一节的示例中，我们打印了一系列数字。要将这些数字转换为一个列表，可使用list():\nnumbers = list(range(1,6))\nprint(numbers)\n结果如下：\n[1,2,3,4,5]\n    使用range()时，还可以指定步长。例如，下面的代码打印1~10内的偶数：\neven_numbers.py\n\neven_numbers = list(range(2,11,2))\nprint(even_numbers)\n在这个示例中，函数range()从2开始数，然后不断地加2，知道达到或超过最终值（11），因此，输出结果如下：\n[2,4,6,8,10]\n    使用函数range()几乎能够创建任何需要的数字集，例如，如何创建一个列表，其中包含10各整数（即1-10）的平方呢？在Python中，两个星号（**）表示乘方运算。下面的代码演示了如何将前10个整数的平方加入到一个列表中：\nsquares.py\n\nsquares = []\nfor value in range(1,11):\n    square = value**2\n    squares.append(square)\nprint(squares)\n    首先，我们创建了一个空列表；接下来，使用函数range()让Python遍历1-10的值。在循环中，计算当前值的平方，并将结果存储到变量square中。然后，将新计算得到的平方值附加到列表squares末尾。最后，循环结束后，打印列表squares：\n[1,4,9,16,25,36,49,64,81,100]\n    为让这些代码更简洁，可不使用临时变量square，而直接将每个计算得到的值附加到列表末尾：\nsquares = []\nfor value in range(1,11):\n    squares.append(value**2)\nprint(squares)\n"
    },
    {
        "title": "3.3.3 对数字列表执行简单的统计计算",
        "content": "    有几个专门用于处理数字列表的Python函数。例如，你可以轻松地找出数字列表的最大值、最小值和总和。\n>>>digits = [1,2,3,4,5,6,7,8,9,0]\n>>>min(digits)\n0\nmax(digits)\n9\nsum(digits)\n45"
    },
    {
        "title": "3.3.4 列表解析",
        "content": "   前面介绍的生成列表squares的方法包含三四行代码，而列表解析让你只需编写一行代码就能生成这样的列表。列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素。下面的示例使用列表解析创建你在前面看到的平方数列表\nsquares.py\n\nsquares =  [value**2 for value in range(1,11)]\nprint(squares)\n    要使用这种语法，首先指定一个描述性的列表名，如squares；然后，指定一个左方括号，并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为value**2，它计算平方值。接下来，编写一个for循环，用于给表达式提供之，再加上右方括号。在这个示例中，for循环为for value in range(1,11)，它将值1~10提供给表达式value**2。请注意，这里的for语句末尾没有冒号。\n    结果与你在前面看到的平方数列表相同。"
    },
    {
        "title": "3.4 使用列表的一部分",
        "content": "    在第3章中，你学习了如何访问单个列表元素。在本章中，你一直在学习如何处理列表的所有元素。你还可以处理列表的部分元素——Python称之为切片。"
    },
    {
        "title": "3.4.1 切片",
        "content": "    要创建切片，可指定要使用的第一个元素的索引和最后一个元素的索引加1.与函数range()一样，Python在到达你指定的第二个索引前面的元素后停止。要输出列表中的前三个元素，需要指定索引0~3，这将输出分别为0、1和2的元素。\n    下面的示例处理的是一个运动队成员列表：\nplayers.py\n\nplayers = ['charles','martina','micheal','florence','eli']\nprint(players[0:3])\n    第二行代码打印该列表的一个切片，其中只包含三名队员。输出也是一个列表，其中包含三名队员：\n['charles','michael','florence']\n    你可以生成列表的任何子集，例如，如果你要提取列表的第2~4个元素，可将起始索引指定为1，并将终止索引指定为4。\n    如果你没有指定第一个索引，Python将自动从列表开头开始提取。\n    要让切片种植于列表末尾，也可使用类似的语法，不指定第二个索引即可。\n    无论列表多长，这种语法都能让你输出从特定位置到列表末尾的所有元素。本书前面说过，负数索引返回列表末尾相应距离的元素，因此你可以输出列表末尾的任何切片。"
    },
    {
        "title": "3.4.2 遍历切片",
        "content": "    如果要遍历列表的部分元素，可在for循环中使用切片。在下面的示例中，我们遍历前三名队员，并打印他们的名字：\nplayers = ['charles','martina','michael','florence','eli']\nfor player in players[:3]\n    print(player.title())\n    此处代码没有遍历整个队员列表，而只遍历前三名队员：\nCharles\nMartina\nMichael\n"
    },
    {
        "title": "3.4.3 复制列表",
        "content": "    你经常需要根据既有列表创建全新的列表。下面来介绍复制列表的工作原理，以及复制列表可提供极大帮助的一种情形。\n    要复制列表，可创建一个包含整个列表的切片，方法是同时胜率起始索引和终止索引（[:]）。这让Python创建一个始于第一个元素，终止于最后一个元素的切片，即复制整个列表。例如：\nmine = ['a','b','c']\nyours = mine[:]\nprint(mine)\nprint(yours)\n    我们首先创建了一个名叫mine的列表，然后创建了一个名叫yours的新列表。我们在不指定任何索引的情况下从列表mine中提取一个切片，从而创建了这个列表的副本，再将该副本存储到变量yours中。打印每个列表后，我们发现它们包含的内容相同：\n['a','b','c']\n['a','b','c']\n    为核实我们确实拥有两个列表，下面在每个列表中，都添加一个字母：\n...\n...\nmine.append('d')\nyours.append('e')\n...\n...\n    与前一个示例一样，只不过这次我们在每个列表中都添加了一个新的字母。最后，打印这两个列表，合适这两个字母确实包含在正确的列表当中：\n['a','b','c','d']\n['a','b','c','e']\n    还有种错误的情况，倘若我们只是简单的将mine赋给yours，就不能得到两个列表。即简单的yours = mine是行不通的。\n    这里将mine赋给yours，而不是将mine的副本存储到yours。这种语法实际上是让Python将新变量yours关联到包含在mine中的列表，因此这两个变量都指向同一个列表。鉴于此，如果我们添加'd'、'e'两个字母，会得到\n['a','b','c','d','e']\n['a','b','c','d','e']\n    这样的输出结果。"
    },
    {
        "title": "3.5 元组",
        "content": "    列表非常适合用于存储在程序运行期间可能变化的数据集。列表是可以修改的，这对处理网站的用户列表或游戏中的角色列表至关重要。然而，有时候你需要创建一系列不可修改的元素，元组可以满足这种需求。Python将不能修改的值称为不可变的，而不可变的列表成为元组。"
    },
    {
        "title": "3.5.1 定义元组",
        "content": "    元组看起来犹如列表，但使用圆括号而不是方括号来表示。定义元组后，就可以使用索引来访问其元素，就像访问列表元素一样。\n    例如，若果有一个大小不应改变的举行，可将其长度和宽度存储在一个元组中，从而确保它们是不能修改的：\ndemensions.py\n\ndimensions = (200,50)\nprint(dimensions[0])\nprint(dimensions[1])\n    我们首先定义了元组dimensions，为此我们使用了圆括号而不是方括号。接下来，我们分别打印该元组的各个元素，使用的语法与访问列表元素时使用的语法相同：\n200\n50\n    下面来尝试修改元组中的一个元素，看看结果如何：\n1\ndimensions[0] = 250\n    第二行的代码试图修改第一个元素的值，导致Python返回类型错误消息。由于试图修改元组的操作是被禁止的，因此Python指出不能给元组的元素赋值：\nTraceback (most recent call last):\n  File \"dimensions.py\", line 3, in <module>\n    dimensions[0] = 250\nTypeError: 'tuple' object does not support item assignment\n    代码试图修改矩阵的尺寸时，Python报告错误，这很好，因为这正是我们希望的。"
    },
    {
        "title": "3.5.2 遍历元组中的所有值",
        "content": "    像列表一样，也可以用for循环来遍历元组中的所有值，操作与前文所述相似。"
    },
    {
        "title": "3.5.3 修改元组变量",
        "content": "    虽然不能修改元组的元素，但可以给存储元组的变量赋值。因此，如果要修改前述矩形的尺寸，可重新定义整个元组：\ndimensions = (200,50)\nprint(\"Original dimensions:\")\nfor dimension in dimensions:\n    print(dimension)\ndimensions = (400,100)\nprint(\"\\nModified dimensions:\")\nfor dimension in dimensions:\n    print(dimension)\n    我们首先定义了一个元组，并将其存储的尺寸打印了出来；接下来，将一个新元组存储到变量dimensions中；然后，打印新的尺寸。这次，Oython不会报告任何错误，因为给元组变量赋值是合法的：\nOriginal dimensions:\n200\n50\n\nModified dimensions:\n400\n100\n    相比于列表，元组是更简单的数据结构。如果需要存储的一组值在程序的整个生命周期内都不变，可使用元组。"
    },
    {
        "title": "3.6 小结",
        "content": "    在本章中你学习了：如何高效地处理列表中的元素；如何使用for循环遍历列表，Python如何根据缩进来确定程序的结构以及如何避免一些常见的缩进错误；如何创建简单的数字列表，以及可对数字列表执行的一些操作；如何通过切片来使用列表的一部分和复制列表。你还学习了元组（它对不应变化的值提供了一定程度的保护）。\n    在第5章中，你将学习如何使用if语句在不同的条件下采取不同的措施；学习如何将一组较复杂的条件测试组合起来，并在满足特定条件时采取相应的措施。你还将学习如何在遍历列表时，通过使用if语句对特定元素采取特定的措施。"
    },
    {
        "title": "第4章 if语句",
        "content": "    编辑时经常需要检查一系列条件，并据此决定采取什么措施。在Python中，if语句让你能够检查程序的当前状态，并据此采取相应的措施。\n    在本章中，你将学习条件测试，以检查感兴趣的任何条件。你将学习简单的if语句，以及创建一系列复杂的if语句来确定当前到底处于什么情形。接下来，你将把学到的知识用于列表，以编写for循环，以一种方式处理列表中的大多数元素，并以另一种不同的方式处理包含特定值的元素。"
    },
    {
        "title": "4.1 一个简单的示例",
        "content": "    下面是一个简短的示例，演示了如何使用if语句来正确地处理特殊情形。假设你有一个汽车列表，并想将其中每辆汽车的名称打印出来。对于大多数汽车，都应以首字母大写的方式打印其名称，但对于汽车名'bmw'，应以全大写的方式打印。下面的代码遍历一个列表，并以首字母大写的方式打印其中的汽车名，但对于汽车名'bmw'，以全大写的方式打印：\ncars.py\n\ncars = ['audi','bmw','subaru','toyota']\nfor car in cars:\n    if car == 'bmw':\n        print(car.upper())\n    else:\n        print(car.title())\n    在这个示例中的循环首先检查当前的汽车名是否是'bmw'（见第三行）。如果是，就以全大写的方式打印它，；否则就以首字母大写的方式打印：\nAudi\nBMW\nSubaru\nToyota\n    这个示例涵盖了本章将介绍的很多概念。下面先来介绍可用来在程序中检查条件的测试。"
    },
    {
        "title": "4.2 条件测试",
        "content": "    每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条件测试。Python根据条件测试的值为True还是False来决定是否执行if语句中的代码。如果条件测试的值为True，Python就执行紧跟在if语句后面的代码；如果为False，Python就忽略这些代码。"
    },
    {
        "title": "4.2.1 检查是否相等",
        "content": "    大多数条件测试都将一个变量的当前值同特定值进行比较。最简单的条件测试检查变量的值是否与特定值相等：\n>>>car = 'bmw'\ncar == 'bmw'\nTrue\n    我们首先使用一个等号将car的值设置为'bmw'。接下来，使用两个等号（==）检查car的值是否为'bmw'。这个相等运算符在它两边的值相等时返回True，否则返回False。在这个示例中，两边的值相等，因此Python返回True。大多数编程语言使用等好的方式都与这里演示的相同。"
    },
    {
        "title": "4.2.2 检查是否相等时区分大小写",
        "content": "    在Python中检查是否相等时区分大小写，例如，两个大小写不同的值会被视为不相等：\n>>>car = 'Audi'\n>>>car == 'audi'\nFalse\n    如果大小写很重要，这种行为有其优点。但如果大小写无关紧要，而只检查变量的值，可将变量的值转换为小写，再进行比较：\n>>>car = 'Audi'\n>>>car.lower() == 'audi'\nTrue\n    无论值'Audi'的大小写如何，上述测试都将返回True，因为该测试不区分大小写。函数lower()不会修改存储在变量car中的值，因此进行这样的比较时不会影响原来的变量。\n网站采用类似的方式让用户输入的数据符合特定的格式。例如，网站可能使用类似的测试来确保用户名时独一无二的，而并非只是与另一个用户名的大小写不同。用户提交新的用户名时，将把它转换为小写，并与所有既有用户名的小写版本进行比较。执行这种检查时，如果已经有用用户名'john'，则用户提交用户名'John'时将遭到拒绝。"
    },
    {
        "title": "4.2.3 检查是否不相等",
        "content": "    检查两个值是否不相等，可结合使用惊叹号和等号（!=），其中的惊叹号表示不，在很多编程语言中都如此。\n"
    },
    {
        "title": "4.2.4 比较数字",
        "content": "    检查数字的数值相等或不相等非常简单。也需要用到（==）和（!=）。\n    另外，再条件语句中可包含各种数学比较，如小于（<）、小于等于（<=）、大于（>）、大于等于（>=）。"
    },
    {
        "title": "4.2.5 检查多个条件",
        "content": "    你可能想同时检查多个条件，例如，有时候你需要再两个条件都为True时才执行相应的操作，而有时候你只要求一个条件为True时就执行相应的操作。在这种情况下，关键字and和or可协助你一臂之力。\n    1.使用and检查多个条件\n    要检查是否两个条件都为True，可使用关键字and将两个条件测试合二为一；如果每个测试都通过了，整个表达式就为True；如果至少有一个测试没有通过，整个表达式就为False。\n    例如，要检查两个人都不小于21岁，可使用下面的测试：\n>>>age_0 = 22\n>>>age_1 = 18\n>>>age_0 >= 21 and age_1 >= 21\nFalse\n>>>age_1 = 22\n>>>>>>age_0 >= 21 and age_1 >= 21\nTrue\n    为改善可读性，可将每个测试都分别放在一对括号内，但并非必须这样做。如果你使用括号，测试将类似下面这样：\n(age_0 >= 21) and (age_1 >= 21)\n    2.使用or检查多个条件\n    关键字or也能够让你检查多个条件，但只要至少有一个条件满足，就能通过整个测试。仅当两个测试都没有通过时，使用or的表达式菜为False。"
    },
    {
        "title": "4.2.6 检查特定值是否包含在列表中",
        "content": "    还有些时候，确定特定的值未包含在列表中很重要；在这种情况下，可使用关键字not in。例如：\nbanned.py\n\nbanned = ['a','b','c']\nuser = 'd'\nif user not in banned\n    print('it's not banned')\n    第三行代码简单易懂：如果user的值不包含在列表banned中，Python将返回True，进而执行缩进的代码行：\nit's not banned"
    },
    {
        "title": "4.2.8 布尔表达式",
        "content": "    随着你对编程的了解越来越深入，将遇到术语布尔表达式，它不过是条件测试的别名。与条件表达式一样，布尔表达式的结果要么为True，要么为False。\n    布尔值通常用于记录条件，如游戏是否正在运行，或用户是否可以编辑网站的特定内容：\ngame_active = True\ncan_edit = False\n在跟踪程序状态或程序中重要的条件方面，布尔值提供了一种高效的方式。"
    },
    {
        "title": "4.3 if语句",
        "content": "    理解条件测试后，就可以开始编写if语句了。if语句有很多种，选择使用哪种取决于要测试的条件数。前面讨论条件测试时，列举了多个if语句示例，下面更深入地讨论这个主题。"
    },
    {
        "title": "4.3.1 简单的if语句",
        "content": "    最简单if语句只有一个测试和一个操作：\nif conditional_test:\n    do something\n    在第1行中，可包含任何条件测试，而在紧跟在测试后面的缩进代码块中，可执行任何操作。如果条件测试的结果为True，Python就会执行紧跟在if语句后面的代码；否则Python将忽略这些代码。\n    假设有一个表示某人年龄的变量，而你想知道这个人是否大于等于18岁：\nage.py\n\nage = 19\nif age >= 18\n    print(\"yes\")\n    在第2行，Python检查age的值是否大于或等于18；答案时肯定的，所以会执行print语句：\nyes\n    在if语句中，缩进的作用与for循环中，相同。如果测试通过了，将执行if语句后面所有缩进的代码行，否则将忽略他们。\n    在紧跟if语句后面的代码块中，可根据需要包含任意数量的代码行。"
    },
    {
        "title": "4.3.2 if-else语句",
        "content": "    经常需要在条件测试通过了时执行一个操作，并在没有通过时执行另一个操作；在这种情况下，可使用Python提供的if-else语句。if-else语句块类似于简单的if语句，但其中的else语句让你能够指定条件测试未通过时要执行的操作。\n    下面的代码在一个人成年时打印yes，未成年时打印no：\nage = 17\nif age >= 18:\n    print(\"yes\")\nelse:\n    print(\"no\")\n    如果第2行的条件测试通过了，就执行第一个所进的print语句块；如果测试结果为False，就执行第4行处的else代码块。这次age小于18，因此打印no：\nno\n    上述代码之所以可行，是因为只存在两种情况：要么成年，要么未成年。if-else结构非常适合用于要让Python执行两种操作之一的情形。在这种简单的if-else结构中，总是会执行两个操作中的一个。"
    },
    {
        "title": "4.3.3 if-elif-else结构",
        "content": "    经常需要检查超过两个的情形，为此可使用Python提供的if-elif-else结构。Python只执行if-elif-else结构中的一个代码块，它一次检查每个条件测试，知道遇到通过了的条件测试。测试通过后，Python将执行紧跟在它后面的代码，并跳过余下的测试。\n    在现实世界中，很多情况需要考虑的情形都超过两个。例如来看一个根据年龄段收费的游乐场：\n    4岁以下免费；\n    4~18岁收费5美元；\n    18岁（含）以上收费10美元。\n    如果只使用一条if语句，如何确定门票价格呢？下面的代码确定一个人所属的年龄段，并打印一条包含门票价格的消息：\namusement_park.py\n\nage = 12\nif age < 4:\n    print(\"Your admission cost is $0.\")\nelif age < 18:\n    print(\"Your admission cost is $5.\")\nelse:\n    print(\"Your admission cost is $10\")\n    第2行的if测试检查一个人是否不满4岁，如果是这样，Python就打印一条合适的消息，并跳过余下的测试。第4行的elif代码行其实是另一个if测试，它仅在前面的测试未通过时才会运行。在这里，我们知道这个人不小于4岁，所以第一个测试未通过。如果这个人未满18岁，Python将打印相应的信息，并跳过else代码块。如果if测试和elif测试都未通过，Python将运行第6行else代码块中的代码。\n    由此可知，输出为：\nYour admission cost is $5.\n"
    },
    {
        "title": "4.3.4 使用多个elif代码块",
        "content": "    可根据需要使用任意数量的elif代码。"
    },
    {
        "title": "4.3.5 省略else代码块",
        "content": "    Python并不要求if-elif结构后面必须有else。在有些情况下，else代码块很好用；而在其他一些情况下，使用一条elif语句来处理特定的情形更清晰。如，可以将之前代码中的\"else:\"改为\"elif age >= 18:\"\n    else是一条包罗万象的语句，只要不满足任何if或elif中的条件测试，其中的代码就会执行，这可能会引入无效甚至恶意的数据。如果知道最终要测试的条件，应考虑使用一个elif代码块来代替else代码块。这样，你就可以肯定，仅当满足相应的条件时，你的代码才会执行。"
    },
    {
        "title": "4.4 使用if语句处理列表",
        "content": "    通过结合使用if语句和列表，可完成一些有趣的任务：对列表中特定的值做特殊处理；高效地管理不断变化的情形，如餐馆是否还有特定的食材；证明代码在各种情形下都将按预取那样运行。"
    },
    {
        "title": "4.4.1 检查特殊元素",
        "content": "    本章开头通过一个简单示例演示了如何如理特殊值'bmw'——它需要采用不同格式的格式进行打印。既然你对条件测试和if语句有了大致的认识，下面来进一步研究如何检查列表中的特殊值，并对其做合适的处理。\n    继续使用前面的比萨店示例。这家比萨店在制作比萨时，每添加一种配料都打印一条消息。通过创建一个列表，在其中包含顾客点的配料，并使用一个循环来指出添加到比萨中的配料，可以以极高的效率编写这样的代码：\ntopping.py\n\nrequested_toppings = ['mushrooms','green peppers','extra cheese']\nfor requested_topping in requested_toopings:\n    print(\"Adding \" + requested_topping +\".\")\n    输出很简单，因为上述代码只是一个简单的for循环：\nAdding mushrooms.\nAdding green peppers.\nAdding extra cheese.\n    然而，如果比萨店的青椒用完了，该如何处理呢？为妥善地处理这种情况，可在for循环中包含一条if语句：\n1.\n2.\n    if requested_topping == 'green peppers':\n        print(\"Sorry, we are out of green peppers right now.\")\n    else:\n3.\n4.\n    在这里比萨中每添加每种配料前都进行检查。第3行的代码检查顾客点的是否是青椒，如果是，就显示一条消息，指出不能点青椒的原因。第5行的代码块确保其他配料都将添加到比萨中。\n    输出表明，妥善地处理了顾客点的每种配料：\nAdding mushrooms.\nSorry, we are out of green peppers right now.\nAdding extra cheese."
    },
    {
        "title": "4.4.2 确定列表不是空的",
        "content": "    到目前为止，对于处理的的每个列表都做了一个简单的假设，即假设它们都至少包含一个元素。我们马上就要让用户来提供存储在列表中的信息，因此不能再假设循环进行时列表不是空的。有鉴于此，在运行for循环前确定列表是否为空很重要。\n    要确定列表是否为空，我们只需进行简单的条件检查：\nif requested_toppings:\n    在if语句中将列表名用在条件表达式中时，Python将在列表至少包含一个元素时返回True，并在列表为空时返回False。"
    },
    {
        "title": "4.5 设置if语句的格式",
        "content": "    本章的每个示例都展示了良好的格式设置习惯。在条件测试的格式设置方面，PEP 8提供的唯一建议是，在诸如==、>=和<等比较运算符两边各添加一个空格，例如，if age < 4:要比if age<4:好。\n    这样的空格不会影响Python对代码的解读，而只是让代码阅读起来更容易。"
    },
    {
        "title": "4.6 小结",
        "content": "    在本章中，你学习了如何编写结果要么为True要么为False的条件测试。你学习了如何编写简单的if语句、if-else语句、if-elif-else结构。在程序中，你使用了这些结构来测试待定的条件，以确定这些条件是否满足。你学习了如何在利用高效地for循环的同时，以不同于其他元素的方式对特定的列表元素进行处理。你还再次学习了Python就代码格式方面提出的建议，而这可能确保即使你编写的程序越来越复杂，其代码依然易于阅读和理解。\n    在第6章，你将学习Python字典。字典类似于列表，但让你能够将不同的信息关联起来。你将学习如何创建和遍历字典，以及如何将字典同列表和if语句结合起来使用。学习字典让你能够模拟更多现实世界的情形。"
    }
]
